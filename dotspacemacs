;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/.spacemacs.d/layers/")
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     (auto-completion :variables
                      auto-completion-complete-with-key-sequence "ht"
                      auto-completion-complete-with-key-sequence-delay 0.3
                      auto-completion-enable-sort-by-usage t
                      auto-completion-private-snippets-directory "~/.spacemacs.d/snippets")
     better-defaults
     (colors :variables
             colors-colorize-identifiers 'all)
     csv
     common-lisp
     (dash :variables
           helm-dash-docset-newpath "~/.local/share/Zeal/Zeal/docsets")
     emacs-lisp
     rcirc
     fasd
     finance
     games
     (git :variables
          git-magit-status-fullscreen t)
     github
     (gtags :disabled-for emacs-lisp clojure)
     (ibuffer :variables
              ibuffer-group-buffers-by 'projects)
     ivy
     (keyboard-layout :variables
                      kl-layout 'dvorak
                      kl-enabled-configurations '(avy ace-window))
     lua
     (markdown :variables markdown-live-preview-engine 'vmd)
     mu4e
     (org :variables
          org-enable-github-support t)
     pandoc
     ;; parinfer
     purescript
     ;; pdf-tools
     (python :variables
             python-enable-yapf-format-on-save t)
     ranger
     racket
     search-engine
     (semantic :enabled-for php madand-web)
     (shell :variables
            shell-default-shell 'eshell
            shell-default-height 30
            shell-default-position 'full)
     shell-scripts
     spell-checking
     (restclient :variables restclient-use-org t)
     (syntax-checking :variables
                      syntax-checking-enable-tooltips nil)
     sql
     version-control
     vimscript
     xkcd
     yaml
     ;; Private layers:
     madand-base
    (madand-web :variables
                madand-web-php-fill-column 114)
     my-programmer-dvorak
     riot
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(crontab-mode
                                      dtrt-indent
                                      simple-mpc
                                      mustache
                                      ;; mustache-mode
                                      nginx-mode
                                      keyfreq
                                      speed-type
                                      string-inflection)
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(evil-escape)
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'hybrid
   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(solarized-dark solarized-light)
   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("not existent font")
   ;; dotspacemacs-default-font '("Droid Sans Mono Slashed For Powerline"
   ;;                            :size 18
   ;;                            :weight normal
   ;;                            :width normal
   ;;                            :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ";"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab t
   ;; If non-nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text t
   ;; If non-nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global t
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non-nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non-nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non-nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non-nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state t
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 1
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'right-then-bottom
   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil
   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar nil
   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide nil
   ;; If non-nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols nil
   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling nil
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server t
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  ;; Custom font settings. Spacemacs' core font handling caused issues with
  ;; `page-break-lines' and ASCII symbols in `woman'.
  ;; If I enable fallback font, there is a considerable slow-down due to
  ;; high CPU usage by the X server!
  ;; TODO: find fallback Unicode font that won't cause the CPU overheat.
  (defvar my-font-default (font-spec :name "Droid Sans Mono Slashed"
                                     :size 18))
  ;; (defvar my-font-fallback1 (font-spec :name "Droid Sans Fallback" :size 18))
  (spacemacs|do-after-display-system-init
   (set-fontset-font t 'unicode my-font-default nil)
   (set-fontset-font "fontset-startup" 'unicode my-font-default nil)
   ;; (set-fontset-font t 'unicode my-font-fallback1 nil 'append)
   ;; (set-fontset-font "fontset-startup" 'unicode my-font-fallback1 nil 'append)

   (set-frame-font my-font-default nil t)))

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  (setq-default
   ange-ftp-netrc-filename "~/.authinfo.gpg"
   auth-source-gpg-encrypt-to "ak@madand.net"
   auth-sources '("~/.authinfo.gpg")
   create-lockfiles nil
   delete-by-moving-to-trash nil
   powerline-default-separator 'alternate
   ranger-cleanup-eagerly t
   rcirc-server-alist '(("irc.freenode.net" :encryption tls :port 6697
                         :channels ("#emacs"))
                        ("irc.gitter.im" :encryption tls
                         :channels ("#syl20bnr/spacemacs")))
   scroll-conservatively 1000
   scroll-margin 2)

  ;; Enable some disabled-by-default Emacs features.
  (put 'set-goal-column 'disabled nil)

  (spacemacs/set-google-translate-languages "en" "uk")

  ;; Global minor modes.
  ;; (dtrt-indent-mode 1)
  (global-hungry-delete-mode 1)

  ;; Treat more buffer types as "useful".
  (dolist (pattern '("\\*info.*\\*" "\\*Man.+\\*" "\\*magit.+" "\\*multiterm.+" "\\*helm-ag-edit\\*"))
    (pushnew pattern spacemacs-useful-buffers-regexp))

  (with-eval-after-load 'evil-iedit-state
    ;; Iedit terminates whenever keyboard macro is executed, so we can only use
    ;; explicit commands.
    (define-key evil-iedit-insert-state-map (kbd "C-h") 'evil-delete-backward-char))

  (with-eval-after-load 'ivy
    (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit))

  ;; Hotfix until Emacs 25.2 realeased.
  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))

  ;; Make Term buffers start in Emacs state.
  (setq evil-insert-state-modes (delq 'term-mode evil-insert-state-modes))
  (add-to-list 'evil-emacs-state-modes 'term-mode)
  ;; Force Emacs state in term whenever Insert state was meant.
  ;; (defvar madand-replace-insert-with-emacs-modes-list '(term-mode)
  ;;   "List of major modes where the Emacs state will be forced
  ;;   instead of the Insert state.")
  ;; (add-hook 'evil-insert-state-entry-hook
  ;;           (lambda ()
  ;;             (evil-emacs-state 1)))
  (with-eval-after-load 'multi-term
    (add-to-list 'term-bind-key-alist '("C-c z" . term-stop-subjob))
    (add-to-list 'term-bind-key-alist '("<escape>" . term-send-esc)))

  (with-eval-after-load 'with-editor
    ;; Workaround for FreeBSD: https://github.com/magit/magit/issues/2672
    (setq with-editor-sleeping-editor "\
bash -c '\
echo \"WITH-EDITOR: $$ OPEN $0\"; \
sleep 604800 & sleep=$!; \
trap \"kill $sleep; exit 0\" USR1; \
trap \"kill $sleep; exit 1\" USR2; \
wait $sleep'"))

  ;; TRAMP
  (with-eval-after-load 'tramp
    (defun my-tramp-add-root-proxies (&rest host-names)
      "Add each of the HOST-NAMES to `tramp-default-proxies-alist'.

Each added entry has form (HOST \"root\" \"/ssh:%h:\")."
      (dolist (host host-names)
        (add-to-list 'tramp-default-proxies-alist
                     (list host "\\`root\\'" "/ssh:%h:"))))
    (my-tramp-add-root-proxies "s1" "rudno_pc" "s2m" "ubuntu"))


  ;; Bind avy to s and S in Normal and Visual.
  ;; Move evil-surround-region to gs in Visual
  (define-key evil-normal-state-map (kbd "s") 'avy-goto-word-1)
  (define-key evil-motion-state-map (kbd "s") 'avy-goto-word-1)
  (define-key evil-normal-state-map (kbd "S") 'avy-goto-char-timer)
  (define-key evil-motion-state-map (kbd "S") 'avy-goto-char-timer)
  (evil-define-key 'visual evil-surround-mode-map "s" 'avy-goto-word-1)
  (evil-define-key 'visual evil-surround-mode-map "S" 'avy-goto-char-timer)
  (evil-define-key 'visual evil-surround-mode-map "gs" 'evil-surround-region)

  ;; (spacemacs/set-leader-keys
  ;;   "TAB"  'spacemacs/alternate-buffer-in-persp)

  (with-eval-after-load 'company
    (setq company-gtags-insert-arguments nil)
    (define-key company-active-map [C-i] 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "M-t") (lambda ()
                                                 (interactive)
                                                 (when (yas--active-field-overlay)
                                                   (company-abort)
                                                   (yas-prev-field))))
    (define-key company-active-map (kbd "M-n") (lambda ()
                                                 (interactive)
                                                 (when (yas--active-field-overlay)
                                                   (company-abort)
                                                   (yas-next-field)))))

  ;; Diminish gtags minor mode indicator
  (with-eval-after-load 'ggtags
    (spacemacs|hide-lighter ggtags-mode))

  (with-eval-after-load 'helm-gtags
    (spacemacs|hide-lighter helm-gtags-mode))

  (with-eval-after-load 'recentf
    (setq recentf-exclude (delete (expand-file-name package-user-dir) recentf-exclude)))
  )
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-idle-interval 0.25)
 '(ede-project-directories (quote ("/home/madand/web/scribble.io")))
 '(erc-hide-list (quote ("JOIN" "PART" "QUIT")))
 '(erc-modules
   (quote
    (autojoin completion log match move-to-prompt services spelling image hl-nicks youtube services netsplit fill button match track readonly networks ring autojoin noncommands irccontrols move-to-prompt stamp menu list)))
 '(erc-prompt-for-password nil)
 '(evil-move-beyond-eol t)
 '(evil-want-Y-yank-to-eol t)
 '(exec-path-from-shell-arguments (quote ("-l")))
 '(flycheck-idle-change-delay 5)
 '(helm-dash-browser-func (quote eww))
 '(magit-diff-refine-hunk (quote all))
 '(magit-log-arguments (quote ("--graph" "--decorate" "-n326")))
 '(magit-log-margin (quote (t age-abbreviated magit-log-margin-width t 18)))
 '(magit-merge-arguments (quote ("--ff-only")))
 '(magit-pull-arguments nil)
 '(magit-rebase-arguments (quote ("--autosquash")))
 '(mocha-options "--recursive --require babel-register")
 '(nodejs-repl-command "node")
 '(org-M-RET-may-split-line (quote ((default))))
 '(org-agenda-files (quote ("~/org")))
 '(org-catch-invisible-edits (quote smart))
 '(org-pomodoro-length 40)
 '(org-pomodoro-long-break-length 40)
 '(org-pomodoro-short-break-length 10)
 '(org-special-ctrl-a/e t)
 '(org-special-ctrl-k t)
 '(package-selected-packages
   (quote
    (parinfer smartscan rebox2 rcirc-notify rcirc-color racket-mode ivy-hydra prog-inflection sudoku restclient-helm ob-restclient company-restclient know-your-http-well insert-shebang hide-comnt helm-purpose window-purpose imenu-list pug-mode mmt powerline purescript-mode php-mode org alert log4e gntp skewer-mode simple-httpd json-snatcher json-reformat js2-mode parent-mode request haml-mode gitignore-mode fringe-helper git-gutter+ git-gutter gh marshal logito pcache ht flyspell-correct pos-tip flx grizzl magit-popup anzu evil goto-chg diminish web-completion-data dash-functional tern company hydra paredit peg eval-sexp-fu highlight seq spinner queue pkg-info clojure-mode epl bind-map bind-key yasnippet packed anaconda-mode pythonic f avy-menu avy async auto-complete popup package-build dash web-mode persp-mode org-plus-contrib neotree js2-refactor help-fns+ helm-themes helm-pydoc helm-projectile helm-gtags helm-descbinds helm-ag clj-refactor ace-jump-helm-line iedit smartparens undo-tree flycheck helm helm-core markdown-mode projectile magit git-commit s zeal-at-point yapfify yaml-mode xterm-color xkcd ws-butler with-editor window-numbering which-key web-beautify volatile-highlights vmd-mode vimrc-mode vi-tilde-fringe uuidgen use-package typit toc-org tagedit string-inflection stickyfunc-enhance srefactor sql-indent speed-type spacemacs-theme spaceline solarized-theme smeargle slim-mode simple-mpc shell-pop scss-mode sass-mode restclient restart-emacs ranger rainbow-mode rainbow-identifiers rainbow-delimiters quelpa pyvenv pytest pyenv-mode py-isort psci psc-ide popwin pip-requirements phpunit phpcbf php-refactor-mode php-extras php-auto-yasnippets pcre2el paradox pandoc-mode pacmacs ox-pandoc ox-gfm orgit org-projectile org-present org-pomodoro org-download org-bullets open-junk-file ob-http nginx-mode mwim mustache-mode mustache multiple-cursors multi-term move-text mmm-mode markdown-toc magit-gitflow magit-gh-pulls macrostep lua-mode lorem-ipsum livid-mode live-py-mode linum-relative link-hint less-css-mode ledger-mode keyfreq json-mode js-doc jade-mode info+ inflections indent-guide ido-vertical-mode ibuffer-projectile hy-mode hungry-delete htmlize hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-swoop helm-mode-manager helm-make helm-gitignore helm-flx helm-dash helm-css-scss helm-company helm-c-yasnippet google-translate golden-ratio gnuplot github-search github-clone github-browse-file gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gist gh-md ggtags flyspell-correct-helm flycheck-pos-tip flycheck-ledger flx-ido fish-mode fill-column-indicator fasd fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-ediff evil-cleverparens evil-args evil-anzu eshell-z eshell-prompt-extras esh-help erc-yt erc-view-log erc-social-graph erc-image erc-hl-nicks engine-mode emmet-mode elisp-slime-nav edn editorconfig dumb-jump dtrt-indent diff-hl define-word dactyl-mode cython-mode csv-mode crontab-mode company-web company-tern company-statistics company-shell company-anaconda column-enforce-mode color-identifiers-mode coffee-mode clojure-snippets clean-aindent-mode cider-eval-sexp-fu cider auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile aggressive-indent adaptive-wrap ace-window ace-popup-menu ace-link ac-ispell 2048-game)))
 '(paradox-github-token t)
 '(psc-ide-add-import-on-completion t t)
 '(psc-ide-rebuild-on-save nil t)
 '(ring-bell-function (quote ignore))
 '(safe-local-variable-values
   (quote
    ((checkdoc-package-keywords-flag)
     (less-css-compile-at-save . t)
     (zeal-at-point-docset "yiiphp")
     (php-auto-yasnippet-required-files
      (list "~/web/scribble.io/vendor/autoload.php"))
     (eval php-enable-drupal-coding-style)
     (eval php-enable-psr2-coding-style)
     (eval php-enable-symfony2-coding-style)
     (checkdoc-minor-mode . t)
     (firestarter . ert-run-tests-interactively))))
 '(vc-follow-symlinks t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(avy-lead-face ((t (:inherit isearch :background "#073642" :foreground "#dc322f"))))
 '(avy-lead-face-0 ((t (:inherit isearch :background "#073642" :foreground "#268bd2"))))
 '(avy-lead-face-1 ((t (:inherit isearch :background "#dc322f" :foreground "#073642"))))
 '(avy-lead-face-2 ((t (:inherit isearch :background "#268bd2" :foreground "#073642"))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil))))
 '(ediff-fine-diff-A ((t (:background "#8B2C02" :foreground "light steel blue"))))
 '(ediff-fine-diff-B ((t (:background "#546E00" :foreground "LightSteelBlue3"))))
 '(font-lock-comment-face ((t (:background "#073642" :foreground "#586e75"))))
 '(magit-blame-date ((t (:background "#93a1a1" :foreground "firebrick4"))))
 '(magit-blame-name ((t (:background "#93a1a1" :foreground "firebrick4"))))
 '(smerge-refined-added ((t (:inherit diff-refine-added))))
 '(smerge-refined-changed ((t (:inherit diff-refine-changed))))
 '(smerge-refined-removed ((t (:inherit diff-refine-removed)))))
)
